diff -uNr qemu-1.4.0/block.c qemu-1.4.0-new/block.c
--- qemu-1.4.0/block.c	2013-02-15 18:05:35.000000000 -0500
+++ qemu-1.4.0-new/block.c	2014-03-06 20:49:31.954382233 -0500
@@ -51,6 +51,21 @@
 
 #define NOT_DONE 0x7fffffff /* used while emulated sync operation in progress */
 
+//added by Huixiang Chen, 10/24/2013
+// if 1 then start to record the performance metrics of sdrs
+// else if 0 then end to record the performance metrics
+int64_t sdrs_record_flag = 0;
+
+int64_t sdrs_pow(int64_t x, int64_t y)
+{
+	int64_t res=1;
+	int64_t i=0;
+	for(i=0; i<y; ++i)
+		res = res * x;
+	return res;
+}
+
+
 typedef enum {
     BDRV_REQ_COPY_ON_READ = 0x1,
     BDRV_REQ_ZERO_WRITE   = 0x2,
@@ -650,6 +665,22 @@
     const char *filename,
     int flags, BlockDriver *drv)
 {
+	/*changed by Huixiang Chen, 10/28/2013*/
+
+	int i;
+	for(i=0; i<BDRV_MAX_IOTYPE; i++) {
+		bs->sdrs_nr_bytes[i] = 0;
+		bs->sdrs_nr_ops[i] = 0;
+		bs->sdrs_total_time_ns[i] = 0;
+	}
+
+	/* added by Huixiang Chen, 10/13/2013 */
+	bs->sdrs_rd_last_sector_num = 0;
+	bs->sdrs_wr_last_sector_num = 0;
+
+	bs->sdrs_oio = 0;
+
+
     int ret, open_flags;
 
     assert(drv != NULL);
@@ -702,6 +733,24 @@
         goto free_and_fail;
     }
 
+	/*added by Huixiang Chen, 10/19/2013*/
+	memset(bs->sdrs_positive_rd_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+	memset(bs->sdrs_positive_wr_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+	memset(bs->sdrs_positive_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+
+	memset(bs->sdrs_negative_rd_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+	memset(bs->sdrs_negative_wr_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+	memset(bs->sdrs_negative_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+
+	bs->sdrs_zero_rd_seek_distance_nums = 0;
+	bs->sdrs_zero_wr_seek_distance_nums = 0;
+	bs->sdrs_zero_seek_distance_nums = 0;
+
+	bs->sdrs_rd_seek_count = 0;
+	bs->sdrs_wr_seek_count = 0;
+	/* */
+
+
 #ifndef _WIN32
     if (bs->is_temporary) {
         unlink(filename);
@@ -1186,6 +1235,9 @@
     if (bs->io_limits_enabled) {
         bdrv_io_limits_disable(bs);
     }
+
+	//added by Huixiang Chen, 10/31/2013
+	qmp_set_all_bs_metrics_null(NULL);
 }
 
 void bdrv_close_all(void)
@@ -3345,6 +3397,59 @@
 {
     trace_bdrv_aio_readv(bs, sector_num, nb_sectors, opaque);
 
+	if(sdrs_record_flag == 1) {
+		/* added by Huixiang Chen, 10/13/2013*/
+		/* changed by Huixiang Chen, 10/19/2013*/
+		if(0 == bs->sdrs_rd_seek_count){
+			// do nothing
+		}else{
+
+			int64_t sdrs_bucket_index = 0;
+			int64_t seek_distance = 0;
+			if(sector_num - bs->sdrs_rd_last_sector_num > 0) {
+				seek_distance = sector_num - bs->sdrs_rd_last_sector_num;
+				while( sdrs_pow(10, sdrs_bucket_index) <= seek_distance )
+					sdrs_bucket_index++;
+
+				if( sdrs_pow(10, sdrs_bucket_index) - seek_distance < seek_distance - sdrs_pow(10, sdrs_bucket_index-1) ) {
+					bs->sdrs_positive_rd_seek_distance_nums[sdrs_bucket_index]++;
+					bs->sdrs_positive_seek_distance_nums[sdrs_bucket_index]++;
+				}
+				else {
+					bs->sdrs_positive_rd_seek_distance_nums[sdrs_bucket_index-1]++;
+					bs->sdrs_positive_seek_distance_nums[sdrs_bucket_index-1]++;
+				}
+			}
+			else if(sector_num - bs->sdrs_rd_last_sector_num < 0){
+				seek_distance = bs->sdrs_rd_last_sector_num - sector_num;
+				while( sdrs_pow(10, sdrs_bucket_index) <= seek_distance )
+					sdrs_bucket_index++;
+
+
+				if( sdrs_pow(10, sdrs_bucket_index) - seek_distance < seek_distance - sdrs_pow(10, sdrs_bucket_index-1) ) {
+					bs->sdrs_negative_rd_seek_distance_nums[sdrs_bucket_index]++;
+					bs->sdrs_negative_seek_distance_nums[sdrs_bucket_index]++;
+				}
+				else{
+					bs->sdrs_negative_rd_seek_distance_nums[sdrs_bucket_index-1]++;
+					bs->sdrs_negative_seek_distance_nums[sdrs_bucket_index-1]++;
+				}
+
+			}
+			else    { // this seek distance equals to zero
+				bs->sdrs_zero_rd_seek_distance_nums++;
+				bs->sdrs_zero_seek_distance_nums++;
+			}
+
+
+		} // end else
+		bs->sdrs_rd_last_sector_num = sector_num;
+		bs->sdrs_rd_seek_count++;
+
+
+	}// end if sdrs_record_flag
+
+
     return bdrv_co_aio_rw_vector(bs, sector_num, qiov, nb_sectors,
                                  cb, opaque, false);
 }
@@ -3355,6 +3460,57 @@
 {
     trace_bdrv_aio_writev(bs, sector_num, nb_sectors, opaque);
 
+	//only record if the sdrs_record_flag is set to 1
+	if(sdrs_record_flag == 1) {
+
+		/* added by Huixiang Chen, 10/13/2013 */
+		if(0 == bs->sdrs_wr_seek_count){
+			// do nothing
+		}
+		else{
+			int64_t sdrs_bucket_index = 0;
+			int64_t seek_distance = 0;
+			if(sector_num - bs->sdrs_wr_last_sector_num > 0) {
+				seek_distance = sector_num - bs->sdrs_wr_last_sector_num;
+				while( sdrs_pow(10, sdrs_bucket_index) <= seek_distance )
+					sdrs_bucket_index++;
+
+				if( sdrs_pow(10, (double)sdrs_bucket_index) - seek_distance < seek_distance - sdrs_pow(10, sdrs_bucket_index-1) ) {
+					bs->sdrs_positive_wr_seek_distance_nums[sdrs_bucket_index]++;
+					bs->sdrs_positive_seek_distance_nums[sdrs_bucket_index]++;
+				}
+				else {
+					bs->sdrs_positive_wr_seek_distance_nums[sdrs_bucket_index-1]++;
+					bs->sdrs_positive_seek_distance_nums[sdrs_bucket_index-1]++;
+				}
+			}
+			else if(sector_num - bs->sdrs_wr_last_sector_num < 0){
+				seek_distance = bs->sdrs_wr_last_sector_num - sector_num;
+				while( sdrs_pow(10, sdrs_bucket_index) <= seek_distance )
+					sdrs_bucket_index++;
+
+				if( sdrs_pow(10, sdrs_bucket_index) - seek_distance < seek_distance - sdrs_pow(10.0, sdrs_bucket_index-1) ) {
+					bs->sdrs_negative_wr_seek_distance_nums[sdrs_bucket_index]++;
+					bs->sdrs_negative_seek_distance_nums[sdrs_bucket_index]++;
+				}
+				else{
+					bs->sdrs_negative_wr_seek_distance_nums[sdrs_bucket_index-1]++;
+					bs->sdrs_negative_seek_distance_nums[sdrs_bucket_index-1]++;
+				}
+
+			}
+			else{ // this seek distance equals to zero
+				bs->sdrs_zero_wr_seek_distance_nums++;
+				bs->sdrs_zero_seek_distance_nums++;
+			}
+
+		} // end else
+		bs->sdrs_wr_last_sector_num = sector_num;
+		bs->sdrs_wr_seek_count++;
+
+	}// end if sdrs_record_flag
+
+
     return bdrv_co_aio_rw_vector(bs, sector_num, qiov, nb_sectors,
                                  cb, opaque, true);
 }
@@ -4427,6 +4583,14 @@
     bs->nr_bytes[cookie->type] += cookie->bytes;
     bs->nr_ops[cookie->type]++;
     bs->total_time_ns[cookie->type] += get_clock() - cookie->start_time_ns;
+
+	// changed by Huixiang Chen, 10/22/2013
+	if(sdrs_record_flag == 1){
+		bs->sdrs_nr_bytes[cookie->type] += cookie->bytes;
+		bs->sdrs_nr_ops[cookie->type]++;
+		bs->sdrs_total_time_ns[cookie->type] += get_clock() - cookie->start_time_ns;
+	}
+
 }
 
 void bdrv_img_create(const char *filename, const char *fmt,
@@ -4566,3 +4730,274 @@
         bdrv_delete(bs);
     }
 }
+
+/* added by huixiang chen, 06:40, 10/09/2013 */
+/* set the performance metrics of bs to null, all to zero */
+/* so that we can calculate the performance metrics from the beginning */
+void bdrv_set_bs_metrics_null(BlockDriverState *bs)
+{
+	// changed by huixiang chen, 10/22/2013
+	int i;
+	for(i=0; i<BDRV_MAX_IOTYPE; i++) {
+		bs->sdrs_nr_bytes[i] = 0;
+		bs->sdrs_nr_ops[i] = 0;
+		bs->sdrs_total_time_ns[i] = 0;
+	}
+
+
+	bs->sdrs_rd_seek_count = 0;
+	bs->sdrs_wr_seek_count = 0;
+
+	bs->sdrs_rd_last_sector_num = 0;
+	bs->sdrs_wr_last_sector_num = 0;
+
+	bs->sdrs_oio = 0;
+	//changed by Huixiang Chen, 10/31/2013
+
+	memset(bs->sdrs_positive_rd_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+	memset(bs->sdrs_positive_wr_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+	memset(bs->sdrs_positive_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+
+	memset(bs->sdrs_negative_rd_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+	memset(bs->sdrs_negative_wr_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+	memset(bs->sdrs_negative_seek_distance_nums, 0, sizeof(int64_t) * BDRV_MAX_SEEK_DISTANCE_TYPES);
+
+	bs->sdrs_zero_rd_seek_distance_nums = 0;
+	bs->sdrs_zero_wr_seek_distance_nums = 0;
+	bs->sdrs_zero_seek_distance_nums = 0;
+}
+
+// added by huixiang chen, 10/22/2013
+// to get the sdrs performance metrics
+BlockStats *bdrv_sdrs_query_stats(const BlockDriverState * bs)
+{
+	BlockStats *s;
+	BdrvTrackedRequest *req;
+
+	s = g_malloc0(sizeof(*s));
+
+	if (bs->device_name[0]) {
+		s->has_device = true;
+		s->device = g_strdup(bs->device_name);
+	}
+
+
+	s->stats = g_malloc0(sizeof(*s->stats));
+	// changed by Huixiang Chen, 10/22/2013
+	s->stats->total_sectors = bs->total_sectors;
+	s->stats->sdrs_rd_bytes = bs->sdrs_nr_bytes[BDRV_ACCT_READ];
+	s->stats->sdrs_wr_bytes = bs->sdrs_nr_bytes[BDRV_ACCT_WRITE];
+	s->stats->sdrs_rd_operations = bs->sdrs_nr_ops[BDRV_ACCT_READ];
+	s->stats->sdrs_wr_operations = bs->sdrs_nr_ops[BDRV_ACCT_WRITE];
+	s->stats->sdrs_flush_operations = bs->sdrs_nr_ops[BDRV_ACCT_FLUSH];
+	s->stats->sdrs_wr_total_time_ns = bs->sdrs_total_time_ns[BDRV_ACCT_WRITE];
+	s->stats->sdrs_rd_total_time_ns = bs->sdrs_total_time_ns[BDRV_ACCT_READ];
+	s->stats->sdrs_flush_total_time_ns = bs->sdrs_total_time_ns[BDRV_ACCT_FLUSH];
+
+
+	//calculate the average IO nums of read, write and total
+	s->stats->sdrs_avg_rd_io_size = 0;
+	s->stats->sdrs_avg_wr_io_size = 0;
+	s->stats->sdrs_avg_io_size = 0;
+
+	if(bs->sdrs_nr_ops[BDRV_ACCT_READ] != 0) {
+		s->stats->sdrs_avg_rd_io_size = bs->sdrs_nr_bytes[BDRV_ACCT_READ]/bs->sdrs_nr_ops[BDRV_ACCT_READ]/1024;
+	}
+	if(bs->sdrs_nr_ops[BDRV_ACCT_WRITE] != 0) {
+		s->stats->sdrs_avg_wr_io_size = bs->sdrs_nr_bytes[BDRV_ACCT_WRITE]/bs->sdrs_nr_ops[BDRV_ACCT_WRITE]/1024;
+	}
+	if(bs->sdrs_nr_ops[BDRV_ACCT_READ] + bs->sdrs_nr_ops[BDRV_ACCT_WRITE] != 0) {
+		s->stats->sdrs_avg_io_size = (bs->sdrs_nr_bytes[BDRV_ACCT_READ]+bs->sdrs_nr_bytes[BDRV_ACCT_WRITE])/(bs->sdrs_nr_ops[BDRV_ACCT_READ] + bs->sdrs_nr_ops[BDRV_ACCT_WRITE])/1024;
+	}
+
+	/*added by Huixiang Chen, 10/19/2013*/
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E0 = bs->sdrs_positive_rd_seek_distance_nums[0];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E1 = bs->sdrs_positive_rd_seek_distance_nums[1];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E2 = bs->sdrs_positive_rd_seek_distance_nums[2];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E3 = bs->sdrs_positive_rd_seek_distance_nums[3];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E4 = bs->sdrs_positive_rd_seek_distance_nums[4];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E5 = bs->sdrs_positive_rd_seek_distance_nums[5];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E6 = bs->sdrs_positive_rd_seek_distance_nums[6];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E7 = bs->sdrs_positive_rd_seek_distance_nums[7];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E8 = bs->sdrs_positive_rd_seek_distance_nums[8];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E9 = bs->sdrs_positive_rd_seek_distance_nums[9];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E10 = bs->sdrs_positive_rd_seek_distance_nums[10];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E11 = bs->sdrs_positive_rd_seek_distance_nums[11];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E12 = bs->sdrs_positive_rd_seek_distance_nums[12];
+	s->stats->sdrs_positive_rd_seek_distance_nums_10E13 = bs->sdrs_positive_rd_seek_distance_nums[13];
+
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E0 = bs->sdrs_positive_wr_seek_distance_nums[0];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E1 = bs->sdrs_positive_wr_seek_distance_nums[1];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E2 = bs->sdrs_positive_wr_seek_distance_nums[2];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E3 = bs->sdrs_positive_wr_seek_distance_nums[3];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E4 = bs->sdrs_positive_wr_seek_distance_nums[4];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E5 = bs->sdrs_positive_wr_seek_distance_nums[5];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E6 = bs->sdrs_positive_wr_seek_distance_nums[6];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E7 = bs->sdrs_positive_wr_seek_distance_nums[7];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E8 = bs->sdrs_positive_wr_seek_distance_nums[8];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E9 = bs->sdrs_positive_wr_seek_distance_nums[9];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E10 = bs->sdrs_positive_wr_seek_distance_nums[10];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E11 = bs->sdrs_positive_wr_seek_distance_nums[11];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E12 = bs->sdrs_positive_wr_seek_distance_nums[12];
+	s->stats->sdrs_positive_wr_seek_distance_nums_10E13 = bs->sdrs_positive_wr_seek_distance_nums[13];
+
+	s->stats->sdrs_positive_seek_distance_nums_10E0 = bs->sdrs_positive_seek_distance_nums[0];
+	s->stats->sdrs_positive_seek_distance_nums_10E1 = bs->sdrs_positive_seek_distance_nums[1];
+	s->stats->sdrs_positive_seek_distance_nums_10E2 = bs->sdrs_positive_seek_distance_nums[2];
+	s->stats->sdrs_positive_seek_distance_nums_10E3 = bs->sdrs_positive_seek_distance_nums[3];
+	s->stats->sdrs_positive_seek_distance_nums_10E4 = bs->sdrs_positive_seek_distance_nums[4];
+	s->stats->sdrs_positive_seek_distance_nums_10E5 = bs->sdrs_positive_seek_distance_nums[5];
+	s->stats->sdrs_positive_seek_distance_nums_10E6 = bs->sdrs_positive_seek_distance_nums[6];
+	s->stats->sdrs_positive_seek_distance_nums_10E7 = bs->sdrs_positive_seek_distance_nums[7];
+	s->stats->sdrs_positive_seek_distance_nums_10E8 = bs->sdrs_positive_seek_distance_nums[8];
+	s->stats->sdrs_positive_seek_distance_nums_10E9 = bs->sdrs_positive_seek_distance_nums[9];
+	s->stats->sdrs_positive_seek_distance_nums_10E10 = bs->sdrs_positive_seek_distance_nums[10];
+	s->stats->sdrs_positive_seek_distance_nums_10E11 = bs->sdrs_positive_seek_distance_nums[11];
+	s->stats->sdrs_positive_seek_distance_nums_10E12 = bs->sdrs_positive_seek_distance_nums[12];
+	s->stats->sdrs_positive_seek_distance_nums_10E13 = bs->sdrs_positive_seek_distance_nums[13];
+
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E0 = bs->sdrs_negative_rd_seek_distance_nums[0];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E1 = bs->sdrs_negative_rd_seek_distance_nums[1];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E2 = bs->sdrs_negative_rd_seek_distance_nums[2];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E3 = bs->sdrs_negative_rd_seek_distance_nums[3];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E4 = bs->sdrs_negative_rd_seek_distance_nums[4];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E5 = bs->sdrs_negative_rd_seek_distance_nums[5];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E6 = bs->sdrs_negative_rd_seek_distance_nums[6];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E7 = bs->sdrs_negative_rd_seek_distance_nums[7];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E8 = bs->sdrs_negative_rd_seek_distance_nums[8];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E9 = bs->sdrs_negative_rd_seek_distance_nums[9];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E10 = bs->sdrs_negative_rd_seek_distance_nums[10];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E11 = bs->sdrs_negative_rd_seek_distance_nums[11];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E12 = bs->sdrs_negative_rd_seek_distance_nums[12];
+	s->stats->sdrs_negative_rd_seek_distance_nums_10E13 = bs->sdrs_negative_rd_seek_distance_nums[13];
+
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E0 = bs->sdrs_negative_wr_seek_distance_nums[0];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E1 = bs->sdrs_negative_wr_seek_distance_nums[1];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E2 = bs->sdrs_negative_wr_seek_distance_nums[2];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E3 = bs->sdrs_negative_wr_seek_distance_nums[3];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E4 = bs->sdrs_negative_wr_seek_distance_nums[4];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E5 = bs->sdrs_negative_wr_seek_distance_nums[5];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E6 = bs->sdrs_negative_wr_seek_distance_nums[6];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E7 = bs->sdrs_negative_wr_seek_distance_nums[7];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E8 = bs->sdrs_negative_wr_seek_distance_nums[8];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E9 = bs->sdrs_negative_wr_seek_distance_nums[9];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E10 = bs->sdrs_negative_wr_seek_distance_nums[10];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E11 = bs->sdrs_negative_wr_seek_distance_nums[11];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E12 = bs->sdrs_negative_wr_seek_distance_nums[12];
+	s->stats->sdrs_negative_wr_seek_distance_nums_10E13 = bs->sdrs_negative_wr_seek_distance_nums[13];
+
+	s->stats->sdrs_negative_seek_distance_nums_10E0 = bs->sdrs_negative_seek_distance_nums[0];
+	s->stats->sdrs_negative_seek_distance_nums_10E1 = bs->sdrs_negative_seek_distance_nums[1];
+	s->stats->sdrs_negative_seek_distance_nums_10E2 = bs->sdrs_negative_seek_distance_nums[2];
+	s->stats->sdrs_negative_seek_distance_nums_10E3 = bs->sdrs_negative_seek_distance_nums[3];
+	s->stats->sdrs_negative_seek_distance_nums_10E4 = bs->sdrs_negative_seek_distance_nums[4];
+	s->stats->sdrs_negative_seek_distance_nums_10E5 = bs->sdrs_negative_seek_distance_nums[5];
+	s->stats->sdrs_negative_seek_distance_nums_10E6 = bs->sdrs_negative_seek_distance_nums[6];
+	s->stats->sdrs_negative_seek_distance_nums_10E7 = bs->sdrs_negative_seek_distance_nums[7];
+	s->stats->sdrs_negative_seek_distance_nums_10E8 = bs->sdrs_negative_seek_distance_nums[8];
+	s->stats->sdrs_negative_seek_distance_nums_10E9 = bs->sdrs_negative_seek_distance_nums[9];
+	s->stats->sdrs_negative_seek_distance_nums_10E10 = bs->sdrs_negative_seek_distance_nums[10];
+	s->stats->sdrs_negative_seek_distance_nums_10E11 = bs->sdrs_negative_seek_distance_nums[11];
+	s->stats->sdrs_negative_seek_distance_nums_10E12 = bs->sdrs_negative_seek_distance_nums[12];
+	s->stats->sdrs_negative_seek_distance_nums_10E13 = bs->sdrs_negative_seek_distance_nums[13];
+
+
+	s->stats->sdrs_zero_rd_seek_distance_nums = bs->sdrs_zero_rd_seek_distance_nums;
+	s->stats->sdrs_zero_wr_seek_distance_nums = bs->sdrs_zero_wr_seek_distance_nums;
+	s->stats->sdrs_zero_seek_distance_nums = bs->sdrs_zero_seek_distance_nums;
+
+	//calculate the seek distance randomness, 10/25/2013, Huixiang Chen
+	s->stats->sdrs_rd_seek_dis_between_1000 = bs->sdrs_positive_rd_seek_distance_nums[0] + \
+						  bs->sdrs_positive_rd_seek_distance_nums[1] + \
+						  bs->sdrs_positive_rd_seek_distance_nums[2] + \
+						  bs->sdrs_positive_rd_seek_distance_nums[3] + \
+						  bs->sdrs_positive_rd_seek_distance_nums[4] + \
+						  bs->sdrs_zero_rd_seek_distance_nums + \
+						  bs->sdrs_negative_rd_seek_distance_nums[0] + \
+						  bs->sdrs_negative_rd_seek_distance_nums[1] + \
+						  bs->sdrs_negative_rd_seek_distance_nums[2] + \
+						  bs->sdrs_negative_rd_seek_distance_nums[3] + \
+						  bs->sdrs_negative_rd_seek_distance_nums[4];
+	s->stats->sdrs_wr_seek_dis_between_1000 = bs->sdrs_positive_wr_seek_distance_nums[0] + \
+						  bs->sdrs_positive_wr_seek_distance_nums[1] + \
+						  bs->sdrs_positive_wr_seek_distance_nums[2] + \
+						  bs->sdrs_positive_wr_seek_distance_nums[3] + \
+						  bs->sdrs_positive_wr_seek_distance_nums[4] + \
+						  bs->sdrs_zero_wr_seek_distance_nums + \
+						  bs->sdrs_negative_wr_seek_distance_nums[0] + \
+						  bs->sdrs_negative_wr_seek_distance_nums[1] + \
+						  bs->sdrs_negative_wr_seek_distance_nums[2] + \
+						  bs->sdrs_negative_wr_seek_distance_nums[3] + \
+						  bs->sdrs_negative_wr_seek_distance_nums[4];
+
+	s->stats->sdrs_rd_total_seek_dis_cnt = 0;
+	s->stats->sdrs_wr_total_seek_dis_cnt = 0;
+	int i;
+	for(i=0; i<BDRV_MAX_SEEK_DISTANCE_TYPES; i++) {
+		s->stats->sdrs_rd_total_seek_dis_cnt += \
+							bs->sdrs_positive_rd_seek_distance_nums[i] + \
+							bs->sdrs_negative_rd_seek_distance_nums[i];
+		s->stats->sdrs_wr_total_seek_dis_cnt += \
+							bs->sdrs_positive_wr_seek_distance_nums[i] + \
+							bs->sdrs_negative_wr_seek_distance_nums[i];
+	}
+	s->stats->sdrs_rd_total_seek_dis_cnt += bs->sdrs_zero_rd_seek_distance_nums;
+	s->stats->sdrs_wr_total_seek_dis_cnt += bs->sdrs_zero_wr_seek_distance_nums;
+
+	// added by Huixiang Chen, 10/24/2013
+	//changed by Huixiang Chen, 10/31/2013
+	s->stats->sdrs_oio = 0;
+	QLIST_FOREACH(req, &bs->tracked_requests, list){
+		s->stats->sdrs_oio ++;
+        }
+
+	if (bs->file) {
+		s->has_parent = true;
+		s->parent = bdrv_sdrs_query_stats(bs->file);
+	}
+
+	return s;
+}
+
+//added by Huixiang Chen, 10/24/2013
+//set the sdrs_record_flag 1 to start to record the performance metrics 
+void qmp_set_sdrs_record_start(Error ** errp)
+{
+	sdrs_record_flag = 1;
+}
+
+//added by Huixiang Chen, 10/24/2013
+//set the sdrs_record_flag to 0 to end to record the performance metrics
+void qmp_set_sdrs_record_end(Error ** errp)
+{
+	sdrs_record_flag = 0;
+}
+
+/*added by Huixiang Chen, 19:10, 10/09/2013*/
+/*set the performance metrics of all devices to null*/
+void qmp_set_all_bs_metrics_null(Error **errp)
+{
+	BlockDriverState * bs = NULL;
+
+	QTAILQ_FOREACH(bs, &bdrv_states, list) {
+		bdrv_set_bs_metrics_null(bs);
+	}
+}
+
+//added by Huixiang Chen, 10/22/2013
+BlockStatsList *qmp_sdrs_query_blockstats(Error **errp)
+{
+	BlockStatsList *head = NULL, **p_next = &head;
+	BlockDriverState *bs = NULL;
+
+	QTAILQ_FOREACH(bs, &bdrv_states, list) {
+		BlockStatsList *info = g_malloc0(sizeof(*info));
+		info->value = bdrv_sdrs_query_stats(bs);
+
+		*p_next = info;
+		p_next = &info->next;
+	}
+
+	return head;
+}
+
diff -uNr qemu-1.4.0/hmp.c qemu-1.4.0-new/hmp.c
--- qemu-1.4.0/hmp.c	2013-02-15 18:05:35.000000000 -0500
+++ qemu-1.4.0-new/hmp.c	2014-03-06 20:49:06.786381444 -0500
@@ -1379,3 +1379,82 @@
     qmp_chardev_remove(qdict_get_str(qdict, "id"), &local_err);
     hmp_handle_error(mon, &local_err);
 }
+
+/*added by Huixiang Chen, 18:50 10/09/2013 */
+/* to handle the command of setting the performance metrics of all devices to null */
+void hmp_set_block_metrics_null(Monitor *mon, const QDict *qdict)
+{
+	qmp_set_all_bs_metrics_null(NULL);
+}
+
+//added by Huixiang Chen, 10/22/2013
+void hmp_sdrs_start_to_record(Monitor * mon, const QDict * qdict)
+{
+	//start to record the performance metrics of sdrs, Huixiang Chen, 10/24/2013
+	qmp_set_sdrs_record_start(NULL);
+}
+
+//added by Huixiang Chen, 10/22/2013
+void hmp_sdrs_end_to_record(Monitor * mon, const QDict * qdict)
+{
+	//end to record the performance metrics of sdrs, Huixiang Chen, 10/24/2013
+	qmp_set_sdrs_record_end(NULL);
+}
+
+//added by Huixiang Chen, 10/22/2013
+void hmp_sdrs_info_blockstats(Monitor *mon, const QDict *qdict)
+{
+	BlockStatsList *stats_list, *stats;
+
+	stats_list = qmp_sdrs_query_blockstats(NULL);
+
+
+	for (stats = stats_list; stats; stats = stats->next) {
+		if (!stats->value->has_device) {
+			continue;
+		}
+
+		monitor_printf(mon, "%s:", stats->value->device);
+		monitor_printf(mon, "\ntotal_sectors=%" PRId64
+				"\nrd_bytes=%" PRId64
+				"\nwr_bytes=%" PRId64
+				"\nrd_operations=%" PRId64
+				"\nwr_operations=%" PRId64
+				"\nflush_operations=%" PRId64
+				"\nwr_total_time_ns=%" PRId64
+				"\nrd_total_time_ns=%" PRId64
+				"\nflush_total_time_ns=%" PRId64
+				,
+				stats->value->stats->total_sectors,
+				stats->value->stats->sdrs_rd_bytes,
+				stats->value->stats->sdrs_wr_bytes,
+				stats->value->stats->sdrs_rd_operations,
+				stats->value->stats->sdrs_wr_operations,
+				stats->value->stats->sdrs_flush_operations,
+				stats->value->stats->sdrs_wr_total_time_ns,
+				stats->value->stats->sdrs_rd_total_time_ns,
+				stats->value->stats->sdrs_flush_total_time_ns);
+
+		monitor_printf(mon, "\nread_IO_average_size=%" PRId64
+				"\nwrite_IO_average_size=%" PRId64
+				"\nIO_average_size=%" PRId64
+				"\noutstanding_IO=%" PRId64
+				"\nread_seek_distance_between_1000=%" PRId64
+				"\nwrite_seek_distance_between_1000=%" PRId64
+				"\nread_total_seek_distance=%" PRId64
+				"\nwrite_total_seek_distance=%" PRId64,
+				stats->value->stats->sdrs_avg_rd_io_size,
+				stats->value->stats->sdrs_avg_wr_io_size,
+				stats->value->stats->sdrs_avg_io_size,
+				stats->value->stats->sdrs_oio,
+				stats->value->stats->sdrs_rd_seek_dis_between_1000,
+				stats->value->stats->sdrs_wr_seek_dis_between_1000,
+				stats->value->stats->sdrs_rd_total_seek_dis_cnt,
+				stats->value->stats->sdrs_wr_total_seek_dis_cnt);
+
+		monitor_printf(mon, "\n\n");
+	}
+
+	qapi_free_BlockStatsList(stats_list);
+
+}
diff -uNr qemu-1.4.0/hmp.h qemu-1.4.0-new/hmp.h
--- qemu-1.4.0/hmp.h	2013-02-15 18:05:35.000000000 -0500
+++ qemu-1.4.0-new/hmp.h	2014-03-06 20:49:21.510381905 -0500
@@ -84,5 +84,11 @@
 void hmp_nbd_server_stop(Monitor *mon, const QDict *qdict);
 void hmp_chardev_add(Monitor *mon, const QDict *qdict);
 void hmp_chardev_remove(Monitor *mon, const QDict *qdict);
+/*added by Huixiang Chen */
+void hmp_set_block_metrics_null(Monitor *mon, const QDict *qdict);
+void hmp_sdrs_info_blockstats(Monitor *mon, const QDict *qdict);
+void hmp_sdrs_end_to_record(Monitor * mon, const QDict * qdict);
+void hmp_sdrs_start_to_record(Monitor * mon, const QDict * qdict);
 
+#
 #endif
diff -uNr qemu-1.4.0/include/block/block.h qemu-1.4.0-new/include/block/block.h
--- qemu-1.4.0/include/block/block.h	2013-02-15 18:05:35.000000000 -0500
+++ qemu-1.4.0-new/include/block/block.h	2014-03-06 20:48:15.526379838 -0500
@@ -102,6 +102,8 @@
     void *opaque;
 } BDRVReopenState;
 
+//added by Huixiang Chen
+int64_t sdrs_pow(int64_t, int64_t);
 
 void bdrv_iostatus_enable(BlockDriverState *bs);
 void bdrv_iostatus_reset(BlockDriverState *bs);
@@ -449,4 +451,11 @@
 int bdrv_debug_resume(BlockDriverState *bs, const char *tag);
 bool bdrv_debug_is_suspended(BlockDriverState *bs, const char *tag);
 
+/*added by Huixiang Chen, 19:30, 10/09/2013*/
+/*set the performance metrics of a device to null*/
+void bdrv_set_bs_metrics_null(BlockDriverState *bs);
+/*added by Huixiang Chen, 10/22/2013*/
+BlockStats *bdrv_sdrs_query_stats(const BlockDriverState * bs);
+
+
 #endif
diff -uNr qemu-1.4.0/include/block/block_int.h qemu-1.4.0-new/include/block/block_int.h
--- qemu-1.4.0/include/block/block_int.h	2013-02-15 18:05:35.000000000 -0500
+++ qemu-1.4.0-new/include/block/block_int.h	2014-03-06 20:48:29.742380284 -0500
@@ -58,6 +58,14 @@
 #define BLOCK_OPT_LAZY_REFCOUNTS    "lazy_refcounts"
 #define BLOCK_OPT_ADAPTER_TYPE      "adapter_type"
 
+// added by Huixiang Chen, 10/18/2013
+// IO size type from 0K, 4K, 8K, 12K, 16K, until 1024K
+#define BDRV_IO_SIZE_TYPES 257
+
+#define BDRV_MAX_SEEK_DISTANCE_TYPES 14
+#define BDRV_MAX_OIO_TYPES 1000
+
+
 typedef struct BdrvTrackedRequest BdrvTrackedRequest;
 
 typedef struct BlockIOLimit {
@@ -262,6 +270,43 @@
     uint64_t total_time_ns[BDRV_MAX_IOTYPE];
     uint64_t wr_highest_sector;
 
+	/* added by Huixiang Chen, 10/13/2013 */
+	/* the same as the stats we got from info blockstats*/
+	/* but we can set them to zero instread */
+	uint64_t sdrs_nr_bytes[BDRV_MAX_IOTYPE];
+	uint64_t sdrs_nr_ops[BDRV_MAX_IOTYPE];
+	uint64_t sdrs_total_time_ns[BDRV_MAX_IOTYPE];
+
+	/* added by Huixiang Chen, 10/13/2013 */
+	int64_t sdrs_rd_seek_count;
+	int64_t sdrs_wr_seek_count;
+
+	int64_t sdrs_rd_last_sector_num;
+	int64_t sdrs_wr_last_sector_num;
+
+	/* added by Huixiang Chen, 10/19/2013*/
+	/* the number of buckets of seek distance,
+	   from 1, 10, 100, 10E4, 10E5, 10E6, until to total_sectors*/
+	/* intialized after total_sectors is intialized */
+	int64_t sdrs_seek_distance_types;
+
+	int64_t sdrs_positive_rd_seek_distance_nums[BDRV_MAX_SEEK_DISTANCE_TYPES];
+	int64_t sdrs_positive_wr_seek_distance_nums[BDRV_MAX_SEEK_DISTANCE_TYPES];
+	int64_t sdrs_positive_seek_distance_nums[BDRV_MAX_SEEK_DISTANCE_TYPES];
+
+	int64_t sdrs_negative_rd_seek_distance_nums[BDRV_MAX_SEEK_DISTANCE_TYPES];
+	int64_t sdrs_negative_wr_seek_distance_nums[BDRV_MAX_SEEK_DISTANCE_TYPES];
+	int64_t sdrs_negative_seek_distance_nums[BDRV_MAX_SEEK_DISTANCE_TYPES];
+
+	/* also there are some IOs, which seek distance is zero */
+	int64_t sdrs_zero_rd_seek_distance_nums;
+	int64_t sdrs_zero_wr_seek_distance_nums;
+	int64_t sdrs_zero_seek_distance_nums;
+	/**/
+
+	// outstanding I/O
+	int64_t sdrs_oio;
+
     /* Whether the disk can expand beyond total_sectors */
     int growable;
 
diff -uNr qemu-1.4.0/monitor.c qemu-1.4.0-new/monitor.c
--- qemu-1.4.0/monitor.c	2013-02-15 18:05:35.000000000 -0500
+++ qemu-1.4.0-new/monitor.c	2014-03-06 20:48:55.474381090 -0500
@@ -2450,6 +2450,37 @@
         .help       = "show block device statistics",
         .mhandler.cmd = hmp_info_blockstats,
     },
+	//added by Huixiang Chen, 10/22/2013
+	/*this command set the performance metrics of all devices to NULL */
+	{
+		.name	   = "sdrs-set-perf-stats-null",
+		.args_type  = "",
+		.params     = "",
+		.help       = "set the block stats of all devices to NULL",
+		.mhandler.cmd = hmp_set_block_metrics_null,
+	},
+	{
+		.name = "sdrs-start-record",
+		.args_type = "",
+		.params = "",
+		.help   = "start to record the performance metrics of sdrs",
+		.mhandler.cmd = hmp_sdrs_start_to_record,
+	},
+	{
+		.name = "sdrs-end-record",
+		.args_type = "",
+		.params = "",
+		.help = "stop to record the performance metrics and delete all data",
+		.mhandler.cmd = hmp_sdrs_end_to_record,
+	},
+	// just print all the performance metrics
+	{
+		.name = "sdrs-get-perf-metrics",
+		.args_type = "",
+		.params = "",
+		.help = "print the performance metrics in std output",
+		.mhandler.cmd = hmp_sdrs_info_blockstats,
+	},
     {
         .name       = "block-jobs",
         .args_type  = "",
diff -uNr qemu-1.4.0/qapi-schema.json qemu-1.4.0-new/qapi-schema.json
--- qemu-1.4.0/qapi-schema.json	2013-02-15 18:05:35.000000000 -0500
+++ qemu-1.4.0-new/qapi-schema.json	2014-03-06 20:47:51.874379098 -0500
@@ -793,6 +793,7 @@
 #
 # Statistics of a virtual block device or a block backing device.
 #
+# @total_sectors: The number of total sectors of the device
 # @rd_bytes:      The number of bytes read by the device.
 #
 # @wr_bytes:      The number of bytes written by the device.
@@ -815,14 +816,133 @@
 #                     device.  The intended use of this information is for
 #                     growable sparse files (like qcow2) that are used on top
 #                     of a physical device.
-#
+# @sdrs_rd_bytes:
+# @sdrs_wr_bytes:
+# @sdrs_rd_operations:
+# @sdrs_wr_operations:
+# @sdrs_flush_operations:
+# @sdrs_flush_total_time_ns:
+# @sdrs_wr_total_time_ns:
+# @sdrs_rd_total_time_ns:
+# @sdrs_positive_rd_seek_distance_nums:
+# @sdrs_positive_wr_seek_distance_nums:
+# @sdrs_positive_seek_distance_nums:
+# @sdrs_negative_rd_seek_distance_nums:
+# @sdrs_negative_wr_seek_distance_nums:
+# @sdrs_negative_seek_distance_nums:
+# @sdrs_zero_rd_seek_distance_nums:
+# @sdrs_zero_wr_seek_distance_nums:
+# @sdrs_zero_seek_distance_nums:
+# @sdrs_oio:
+# @sdrs_rd_seek_dis_between_1000
+# @sdrs_wr_seek_dis_between_1000
+# @sdrs_rd_total_seek_dis_cnt
+# @sdrs_wr_total_seek_dis_cnt
+
+
 # Since: 0.14.0
 ##
 { 'type': 'BlockDeviceStats',
-  'data': {'rd_bytes': 'int', 'wr_bytes': 'int', 'rd_operations': 'int',
-           'wr_operations': 'int', 'flush_operations': 'int',
+  'data': {'total_sectors':'int', 'rd_bytes': 'int', 'wr_bytes': 'int', 
+            'rd_operations': 'int', 'wr_operations': 'int', 'flush_operations': 'int',
            'flush_total_time_ns': 'int', 'wr_total_time_ns': 'int',
-           'rd_total_time_ns': 'int', 'wr_highest_offset': 'int' } }
+           'rd_total_time_ns': 'int', 'wr_highest_offset': 'int' 
+           'sdrs_rd_bytes': 'int', 'sdrs_wr_bytes': 'int', 
+           'sdrs_rd_operations': 'int', 'sdrs_rd_operations': 'int',
+           'sdrs_wr_operations': 'int', 'sdrs_flush_operations': 'int',
+           'sdrs_flush_total_time_ns': 'int', 'sdrs_wr_total_time_ns': 'int',
+           'sdrs_rd_total_time_ns': 'int', 
+           'sdrs_positive_rd_seek_distance_nums_10E0': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E1': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E2': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E3': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E4': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E5': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E6': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E7': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E8': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E9': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E10': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E11': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E12': 'int',
+           'sdrs_positive_rd_seek_distance_nums_10E13': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E0': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E1': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E2': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E3': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E4': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E5': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E6': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E7': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E8': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E9': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E10': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E11': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E12': 'int',
+           'sdrs_positive_wr_seek_distance_nums_10E13': 'int',
+           'sdrs_positive_seek_distance_nums_10E0': 'int',
+           'sdrs_positive_seek_distance_nums_10E1': 'int',
+           'sdrs_positive_seek_distance_nums_10E2': 'int',
+           'sdrs_positive_seek_distance_nums_10E3': 'int',
+           'sdrs_positive_seek_distance_nums_10E4': 'int',
+           'sdrs_positive_seek_distance_nums_10E5': 'int',
+           'sdrs_positive_seek_distance_nums_10E6': 'int',
+           'sdrs_positive_seek_distance_nums_10E7': 'int',
+           'sdrs_positive_seek_distance_nums_10E8': 'int',
+           'sdrs_positive_seek_distance_nums_10E9': 'int',
+           'sdrs_positive_seek_distance_nums_10E10': 'int',
+           'sdrs_positive_seek_distance_nums_10E11': 'int',
+           'sdrs_positive_seek_distance_nums_10E12': 'int',
+           'sdrs_positive_seek_distance_nums_10E13': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E0': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E1': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E2': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E3': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E4': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E5': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E6': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E7': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E8': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E9': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E10': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E11': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E12': 'int',
+           'sdrs_negative_rd_seek_distance_nums_10E13': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E0': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E1': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E2': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E3': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E4': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E5': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E6': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E7': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E8': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E9': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E10': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E11': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E12': 'int',
+           'sdrs_negative_wr_seek_distance_nums_10E13': 'int',
+           'sdrs_negative_seek_distance_nums_10E0': 'int',
+           'sdrs_negative_seek_distance_nums_10E1': 'int',
+           'sdrs_negative_seek_distance_nums_10E2': 'int',
+           'sdrs_negative_seek_distance_nums_10E3': 'int',
+           'sdrs_negative_seek_distance_nums_10E4': 'int',
+           'sdrs_negative_seek_distance_nums_10E5': 'int',
+           'sdrs_negative_seek_distance_nums_10E6': 'int',
+           'sdrs_negative_seek_distance_nums_10E7': 'int',
+           'sdrs_negative_seek_distance_nums_10E8': 'int',
+           'sdrs_negative_seek_distance_nums_10E9': 'int',
+           'sdrs_negative_seek_distance_nums_10E10': 'int',
+           'sdrs_negative_seek_distance_nums_10E11': 'int',
+           'sdrs_negative_seek_distance_nums_10E12': 'int',
+           'sdrs_negative_seek_distance_nums_10E13': 'int',
+           'sdrs_zero_rd_seek_distance_nums': 'int',
+           'sdrs_zero_wr_seek_distance_nums': 'int',
+           'sdrs_zero_seek_distance_nums': 'int',
+           'sdrs_avg_rd_io_size': 'int', 'sdrs_avg_wr_io_size': 'int', 'sdrs_avg_io_size': 'int',
+           'sdrs_oio': 'int',
+  'sdrs_rd_seek_dis_between_1000': 'int', 'sdrs_wr_seek_dis_between_1000': 'int',
+  'sdrs_rd_total_seek_dis_cnt': 'int', 'sdrs_wr_total_seek_dis_cnt': 'int'} }
 
 ##
 # @BlockStats:
@@ -855,6 +975,14 @@
 ##
 { 'command': 'query-blockstats', 'returns': ['BlockStats'] }
 
+{ 'command': 'sdrs-query-blockstats', 'returns': ['BlockStats'] }
+
+{ 'command': 'set-sdrs-record-start' }
+
+{ 'command': 'set-sdrs-record-end' }
+
+{ 'command': 'set-all-bs-metrics-null' }
+
 ##
 # @VncClientInfo:
 #
diff -uNr qemu-1.4.0/qmp-commands.hx qemu-1.4.0-new/qmp-commands.hx
--- qemu-1.4.0/qmp-commands.hx	2013-02-15 18:05:35.000000000 -0500
+++ qemu-1.4.0-new/qmp-commands.hx	2014-03-06 20:48:00.626379372 -0500
@@ -2775,3 +2775,52 @@
 <- { "return": {} }
 
 EQMP
+
+SQMP
+sdrs-query-blockstats
+--------------
+
+EQMP
+
+    {
+        .name       = "sdrs-query-blockstats",
+        .args_type  = "",
+        .mhandler.cmd_new = qmp_marshal_input_sdrs_query_blockstats,
+    },
+
+SQMP
+set-sdrs-record-start
+--------------
+
+EQMP
+
+    {
+        .name       = "set-sdrs-record-start",
+        .args_type  = "",
+        .mhandler.cmd_new = qmp_marshal_input_set_sdrs_record_start,
+    },
+
+SQMP
+set-sdrs-record-end
+--------------
+
+EQMP
+
+    {
+        .name       = "set-sdrs-record-end",
+        .args_type  = "",
+        .mhandler.cmd_new = qmp_marshal_input_set_sdrs_record_end,
+    },
+
+SQMP
+set-all-bs-metrics-null
+--------------
+
+EQMP
+
+    {
+        .name       = "set-all-bs-metrics-null",
+        .args_type  = "",
+        .mhandler.cmd_new = qmp_marshal_input_set_all_bs_metrics_null,
+    },
+
